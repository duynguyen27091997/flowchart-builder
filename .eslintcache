[{"/home/kuroneko/JS Projects/flowchart-builder/src/index.js":"1","/home/kuroneko/JS Projects/flowchart-builder/src/App.js":"2","/home/kuroneko/JS Projects/flowchart-builder/src/reportWebVitals.js":"3","/home/kuroneko/JS Projects/flowchart-builder/src/components/FlowChart.js":"4","/home/kuroneko/JS Projects/flowchart-builder/src/components/Node.js":"5","/home/kuroneko/JS Projects/flowchart-builder/src/components/FlowTool.js":"6","/home/kuroneko/JS Projects/flowchart-builder/src/hooks/useFlowChart.js":"7","/home/kuroneko/JS Projects/flowchart-builder/src/helpers/helpers.js":"8","/home/kuroneko/JS Projects/flowchart-builder/src/helpers/Drawflow.js":"9"},{"size":500,"mtime":1608698207577,"results":"10","hashOfConfig":"11"},{"size":162,"mtime":1608698207577,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608698207577,"results":"13","hashOfConfig":"11"},{"size":5473,"mtime":1608802370733,"results":"14","hashOfConfig":"11"},{"size":6545,"mtime":1608802098537,"results":"15","hashOfConfig":"11"},{"size":1385,"mtime":1608798610594,"results":"16","hashOfConfig":"11"},{"size":3881,"mtime":1608794810092,"results":"17","hashOfConfig":"11"},{"size":818,"mtime":1608698207577,"results":"18","hashOfConfig":"11"},{"size":85492,"mtime":1608794969445,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"82as0o",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":116,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/home/kuroneko/JS Projects/flowchart-builder/src/index.js",[],["42","43"],"/home/kuroneko/JS Projects/flowchart-builder/src/App.js",[],"/home/kuroneko/JS Projects/flowchart-builder/src/reportWebVitals.js",[],"/home/kuroneko/JS Projects/flowchart-builder/src/components/FlowChart.js",[],"/home/kuroneko/JS Projects/flowchart-builder/src/components/Node.js",["44","45"],"/home/kuroneko/JS Projects/flowchart-builder/src/components/FlowTool.js",[],"/home/kuroneko/JS Projects/flowchart-builder/src/hooks/useFlowChart.js",["46"],"import DrawFlow from \"../helpers/Drawflow\";\nimport {useState, useEffect} from \"react\";\n\n\n// function bindEvent(editor) {\n//     // Events!\n//     editor.on('nodeCreated', function (id) {\n//         console.log(\"Node created \" + id);\n//     })\n//\n//     editor.on('nodeRemoved', function (id) {\n//         console.log(\"Node removed \" + id);\n//     })\n//\n//     editor.on('nodeSelected', function (id) {\n//         console.log(\"Node selected \" + id);\n//     })\n//\n//     editor.on('moduleCreated', function (name) {\n//         console.log(\"Module Created \" + name);\n//     })\n//\n//     editor.on('moduleChanged', function (name) {\n//         console.log(\"Module Changed \" + name);\n//     })\n//\n//     editor.on('connectionCreated', function (connection) {\n//         console.log('Connection created');\n//         console.log(connection);\n//     })\n//\n//     editor.on('connectionRemoved', function (connection) {\n//         console.log('Connection removed');\n//         console.log(connection);\n//     })\n//\n//     editor.on('mouseMove', function (position) {\n//         console.log('Position mouse x:' + position.x + ' y:' + position.y);\n//     })\n//\n//     editor.on('nodeMoved', function (id) {\n//         console.log(\"Node moved \" + id);\n//     })\n//\n//     editor.on('zoom', function (zoom) {\n//         console.log('Zoom level ' + zoom);\n//     })\n//\n//     editor.on('translate', function (position) {\n//         console.log('Translate x:' + position.x + ' y:' + position.y);\n//     })\n//\n//     editor.on('addReroute', function (id) {\n//         console.log(\"Reroute added \" + id);\n//     })\n//\n//     editor.on('removeReroute', function (id) {\n//         console.log(\"Reroute removed \" + id);\n//     })\n//\n// }\n\nconst useFlowChart = (workflowId) => {\n    let [editor, setEditor] = useState(null);\n    //set up editor\n\n    useEffect(() => {\n        let id = document.getElementById(workflowId);\n        if (!editor && id) {\n            setEditor(new DrawFlow(id, workflowId));\n        }\n    }, [editor])\n\n\n    const allowDrop = (ev) => {\n        ev.preventDefault()\n    }\n\n    const drag = (value, ev) => {\n        ev.dataTransfer.setData(\"node\", JSON.stringify(value));\n\n    }\n\n    const addNodeToDrawFlow = (data, pos_x, pos_y) => {\n        let {\n            name = '',\n            description = '',\n            action = {},\n            action_target = {},\n            targets = [],\n            is_first = false\n        } = data;\n        if (editor.editor_mode === 'fixed') {\n            return false;\n        }\n\n\n        if ((editor.workflow.steps.findIndex(item => item.is_first === true) !== -1) && is_first) {\n            alert('Đã tồn tại bước bắt đầu !');\n            return false;\n        }\n        pos_x = pos_x * (editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * (editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));\n        pos_y = pos_y * (editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * (editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));\n\n        let template = `<div><div class=\"title-box\"><h6>${name}</h6><p>${description}</p></div><div class=\"box\"><p class=\"box__target\">Đối tượng chung: ${action_target.name}</p><p class=\"box__action\">Tác vụ : ${action.name}</p>${targets.length > 0 ? `<p class=\"box__action\">Đối tượng cụ thể : <br>${targets.map(item => `<strong> ${item.name}</strong>`)}</p></div></div>` : ''}`;\n        editor.addNode(data, pos_x, pos_y, template);\n\n    }\n\n    const drop = (ev) => {\n        let data = ev.dataTransfer.getData(\"node\");\n        addNodeToDrawFlow(JSON.parse(data), ev.clientX, ev.clientY);\n    }\n\n\n    return [editor, drag, drop, allowDrop];\n};\n\nexport default useFlowChart;\n\n\n","/home/kuroneko/JS Projects/flowchart-builder/src/helpers/helpers.js",[],["47","48"],"/home/kuroneko/JS Projects/flowchart-builder/src/helpers/Drawflow.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164"],"export default class Workflow {\n    constructor(container, workflowId, render = null) {\n        this.events = {};\n        this.container = container;\n        this.workflowId = workflowId;\n        this.precanvas = null;\n        this.nodeId = 1;\n        this.ele_selected = null;\n        this.node_selected = null;\n        this.drag = false;\n        this.reroute = false;\n        this.reroute_fix_curvature = false;\n        this.curvature = 0.5;\n        this.reroute_curvature_start_end = 0.5;\n        this.reroute_curvature = 0.5;\n        this.reroute_width = 6;\n        this.drag_point = false;\n        this.editor_selected = false;\n        this.connection = false;\n        this.connection_ele = null;\n        this.connection_selected = null;\n\n        // Position\n        this.canvas_x = 0;\n        this.canvas_y = 0;\n        this.pos_x = 0;\n        this.pos_x_start = 0;\n        this.pos_y = 0;\n        this.pos_y_start = 0;\n        this.mouse_x = 0;\n        this.mouse_y = 0;\n        this.line_path = 5;\n        this.first_click = null;\n        this.force_first_input = false;\n        this.draggable_inputs = true;\n\n\n        this.select_elements = null;\n        this.noderegister = {};\n        this.render = render;\n\n        // Configurable options\n        this.workflow = {\n            steps: []\n        };\n\n\n        //config mode\n        this.editor_mode = 'edit';\n        this.zoom = 1;\n        this.zoom_max = 1.6;\n        this.zoom_min = 0.5;\n        this.zoom_value = 0.1;\n        this.zoom_last_value = 1;\n\n        // Mobile\n        this.evCache = [];\n        this.prevDiff = -1;\n    }\n\n    start() {\n        this.container.classList.add(\"parent-workflow\");\n        this.container.tabIndex = 0;\n        this.container.innerHTML = \"\";\n        this.precanvas = document.createElement('div');\n        this.precanvas.classList.add(\"workflow\");\n        this.container.appendChild(this.precanvas);\n\n\n        /* Mouse and Touch Actions */\n\n        this.container.addEventListener('mouseup', this.dragEnd.bind(this));\n        this.container.addEventListener('mousemove', this.position.bind(this));\n        this.container.addEventListener('mousedown', this.click.bind(this));\n\n        this.container.addEventListener('touchend', this.dragEnd.bind(this));\n        this.container.addEventListener('touchmove', this.position.bind(this));\n        this.container.addEventListener('touchstart', this.click.bind(this));\n\n        /* Context Menu */\n        this.container.addEventListener('contextmenu', this.contextmenu.bind(this));\n        /* Delete */\n        this.container.addEventListener('keydown', this.key.bind(this));\n\n        /* Zoom Mouse */\n        this.container.addEventListener('wheel', this.zoom_enter.bind(this));\n        /* Update data Nodes */\n        this.container.addEventListener('input', this.updateNodeValue.bind(this));\n\n        this.container.addEventListener('dblclick', this.dblclick.bind(this));\n        /* Mobile zoom */\n        this.container.onpointerdown = this.pointerdown_handler.bind(this);\n        this.container.onpointermove = this.pointermove_handler.bind(this);\n        this.container.onpointerup = this.pointerup_handler.bind(this);\n        this.container.onpointercancel = this.pointerup_handler.bind(this);\n        this.container.onpointerout = this.pointerup_handler.bind(this);\n        this.container.onpointerleave = this.pointerup_handler.bind(this);\n\n        this.load();\n    }\n\n    /* Mobile zoom */\n    pointerdown_handler(ev) {\n        this.evCache.push(ev);\n    }\n\n    pointermove_handler(ev) {\n        for (let i = 0; i < this.evCache.length; i++) {\n            if (ev.pointerId === this.evCache[i].pointerId) {\n                this.evCache[i] = ev;\n                break;\n            }\n        }\n\n        if (this.evCache.length === 2) {\n            // Calculate the distance between the two pointers\n            let curDiff = Math.abs(this.evCache[0].clientX - this.evCache[1].clientX);\n\n            if (this.prevDiff > 100) {\n                if (curDiff > this.prevDiff) {\n                    // The distance between the two pointers has increased\n\n                    this.zoom_in();\n                }\n                if (curDiff < this.prevDiff) {\n                    // The distance between the two pointers has decreased\n                    this.zoom_out();\n                }\n            }\n            this.prevDiff = curDiff;\n        }\n    }\n\n    pointerup_handler(ev) {\n        this.remove_event(ev);\n        if (this.evCache.length < 2) {\n            this.prevDiff = -1;\n        }\n    }\n\n    remove_event(ev) {\n        // Remove this event from the target's cache\n        for (let i = 0; i < this.evCache.length; i++) {\n            if (this.evCache[i].pointerId === ev.pointerId) {\n                this.evCache.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /* End Mobile Zoom */\n\n    load() {\n        this.workflow.steps.forEach((item, index, array) => {\n            this.addNodeImport(item, this.precanvas);\n            this.nodeId += 1;\n        });\n\n        this.workflow.steps.forEach((item, index, array) => {\n            this.updateConnectionNodes('node-' + item.step_id);\n        });\n    }\n\n\n    removeReouteConnectionSelected() {\n        if (this.reroute_fix_curvature) {\n            this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\n                item.classList.remove(\"selected\");\n            });\n        }\n    }\n\n    click(e) {\n        this.dispatch('click', e);\n        if (this.editor_mode === 'fixed') {\n            //return false;\n            if (e.target.classList[0] === 'parent-workflow' || e.target.classList[0] === 'workflow') {\n                this.ele_selected = e.target.closest(\".parent-workflow\");\n            } else {\n                return false;\n            }\n\n        } else {\n            this.first_click = e.target;\n            this.ele_selected = e.target;\n            if (e.button === 0) {\n                this.contextmenuDel();\n            }\n\n            if (e.target.closest(\".workflow_content_node\") != null) {\n                this.ele_selected = e.target.closest(\".workflow_content_node\").parentElement;\n            }\n        }\n        switch (this.ele_selected.classList[0]) {\n            case 'workflow-node':\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    if (this.node_selected !== this.ele_selected) {\n                        this.dispatch('nodeUnselected', true);\n                    }\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n                if (this.node_selected !== this.ele_selected) {\n                    this.dispatch('nodeSelected', this.ele_selected.id.slice(5));\n                }\n                this.node_selected = this.ele_selected;\n                this.node_selected.classList.add(\"selected\");\n                if (!this.draggable_inputs) {\n                    if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA' && e.target.hasAttribute('contenteditable') !== true) {\n                        this.drag = true;\n                    }\n                } else {\n                    this.drag = true;\n                }\n                break;\n            case 'output':\n                this.connection = true;\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    this.node_selected = null;\n                    this.dispatch('nodeUnselected', true);\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n                this.drawConnection(e.target);\n                break;\n            case 'parent-workflow':\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    this.node_selected = null;\n                    this.dispatch('nodeUnselected', true);\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n                this.editor_selected = true;\n                break;\n            case 'workflow':\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    this.node_selected = null;\n                    this.dispatch('nodeUnselected', true);\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n                this.editor_selected = true;\n                break;\n            case 'main-path':\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    this.node_selected = null;\n                    this.dispatch('nodeUnselected', true);\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n                this.connection_selected = this.ele_selected;\n                this.connection_selected.classList.add(\"selected\");\n                if (this.reroute_fix_curvature) {\n                    this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\n                        item.classList.add(\"selected\");\n                    });\n                }\n                break;\n            case 'point':\n                this.drag_point = true;\n                this.ele_selected.classList.add(\"selected\");\n                break;\n            case 'workflow-delete':\n                if (this.node_selected) {\n                    this.removeNodeId(this.node_selected.id);\n                }\n\n                if (this.connection_selected) {\n                    this.removeConnection()\n                }\n\n                if (this.node_selected != null) {\n                    this.node_selected.classList.remove(\"selected\");\n                    this.node_selected = null;\n                    this.dispatch('nodeUnselected', true);\n                }\n                if (this.connection_selected != null) {\n                    this.connection_selected.classList.remove(\"selected\");\n                    this.removeReouteConnectionSelected();\n                    this.connection_selected = null;\n                }\n\n                break;\n            default:\n        }\n        if (e.type === \"touchstart\") {\n            this.pos_x = e.touches[0].clientX;\n            this.pos_x_start = e.touches[0].clientX;\n            this.pos_y = e.touches[0].clientY;\n            this.pos_y_start = e.touches[0].clientY;\n        } else {\n            this.pos_x = e.clientX;\n            this.pos_x_start = e.clientX;\n            this.pos_y = e.clientY;\n            this.pos_y_start = e.clientY;\n        }\n        this.dispatch('clickEnd', e);\n    }\n\n    position(e) {\n        let e_pos_x, e_pos_y;\n        if (e.type === \"touchmove\") {\n            e_pos_x = e.touches[0].clientX;\n            e_pos_y = e.touches[0].clientY;\n        } else {\n            e_pos_x = e.clientX;\n            e_pos_y = e.clientY;\n        }\n\n\n        if (this.connection) {\n            this.updateConnection(e_pos_x, e_pos_y);\n        }\n        if (this.editor_selected) {\n            /*if (e.ctrlKey) {\n              this.selectElements(e_pos_x, e_pos_y);\n            } else { */\n            x = this.canvas_x + (-(this.pos_x - e_pos_x))\n            y = this.canvas_y + (-(this.pos_y - e_pos_y))\n            // console.log(canvas_x +' - ' +pos_x + ' - '+ e_pos_x + ' - ' + x);\n            this.dispatch('translate', {x: x, y: y});\n            this.precanvas.style.transform = \"translate(\" + x + \"px, \" + y + \"px) scale(\" + this.zoom + \")\";\n            //}\n        }\n        if (this.drag) {\n\n            let x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\n            let y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\n            this.pos_x = e_pos_x;\n            this.pos_y = e_pos_y;\n\n            this.ele_selected.style.top = (this.ele_selected.offsetTop - y) + \"px\";\n            this.ele_selected.style.left = (this.ele_selected.offsetLeft - x) + \"px\";\n            let nodeIndex = this.workflow.steps.findIndex(step => step.step_id === parseInt(this.ele_selected.id.slice(5)));\n            if (nodeIndex !== -1) {\n                this.workflow.steps[nodeIndex].pos_x = (this.ele_selected.offsetLeft - x);\n                this.workflow.steps[nodeIndex].pos_y = (this.ele_selected.offsetTop - y);\n            }\n\n            this.updateConnectionNodes(this.ele_selected.id)\n        }\n\n        if (this.drag_point) {\n\n            var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\n            var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\n            this.pos_x = e_pos_x;\n            this.pos_y = e_pos_y;\n\n            var pos_x = this.pos_x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)));\n            var pos_y = this.pos_y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)));\n\n\n            this.ele_selected.setAttributeNS(null, 'cx', pos_x);\n            this.ele_selected.setAttributeNS(null, 'cy', pos_y);\n\n            const nodeUpdate = this.ele_selected.parentElement.classList[2].slice(9)\n            const nodeUpdateIn = this.ele_selected.parentElement.classList[1].slice(13);\n            const output_class = this.ele_selected.parentElement.classList[3];\n            const input_class = this.ele_selected.parentElement.classList[4];\n\n            let numberPointPosition = Array.from(this.ele_selected.parentElement.children).indexOf(this.ele_selected) - 1;\n\n            if (this.reroute_fix_curvature) {\n                const numberMainPath = this.ele_selected.parentElement.querySelectorAll(\".main-path\").length - 1\n\n                numberPointPosition -= numberMainPath;\n                if (numberPointPosition < 0) {\n                    numberPointPosition = 0;\n                }\n            }\n\n            const nodeId = nodeUpdate.slice(5);\n            const searchConnection = this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n                return item.node === nodeUpdateIn && item.output === input_class;\n            });\n\n            this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points[numberPointPosition] = {\n                pos_x: pos_x,\n                pos_y: pos_y\n            };\n\n            const parentSelected = this.ele_selected.parentElement.classList[2].slice(9);\n\n            /*this.workflow.workflow[this.module].data[this.ele_selected.id.slice(5)].pos_x = (this.ele_selected.offsetLeft - x);\n            this.workflow.workflow[this.module].data[this.ele_selected.id.slice(5)].pos_y = (this.ele_selected.offsetTop - y);\n            */\n            this.updateConnectionNodes(parentSelected);\n        }\n\n        if (e.type === \"touchmove\") {\n            this.mouse_x = e_pos_x;\n            this.mouse_y = e_pos_y;\n        }\n        this.dispatch('mouseMove', {x: e_pos_x, y: e_pos_y});\n    }\n\n    dragEnd(e) {\n        let e_pos_x, e_pos_y, ele_last, input_id, input_class;\n\n        if (this.select_elements != null) {\n            this.select_elements.remove();\n            this.select_elements = null;\n        }\n\n        if (e.type === \"touchend\") {\n            e_pos_x = this.mouse_x;\n            e_pos_y = this.mouse_y;\n            ele_last = document.elementFromPoint(e_pos_x, e_pos_y);\n        } else {\n            e_pos_x = e.clientX;\n            e_pos_y = e.clientY;\n            ele_last = e.target;\n        }\n\n        if (this.drag) {\n            if (this.pos_x_start !== e_pos_x || this.pos_y_start !== e_pos_y) {\n                this.dispatch('nodeMoved', this.ele_selected.id.slice(5));\n            }\n        }\n\n        if (this.drag_point) {\n            this.ele_selected.classList.remove(\"selected\");\n        }\n\n        if (this.editor_selected) {\n            this.canvas_x = this.canvas_x + (-(this.pos_x - e_pos_x));\n            this.canvas_y = this.canvas_y + (-(this.pos_y - e_pos_y));\n            this.editor_selected = false;\n        }\n        if (this.connection === true) {\n            //console.log(ele_last)\n            if (ele_last.classList[0] === 'input' || (this.force_first_input && (ele_last.closest(\".workflow_content_node\") !== null || ele_last.classList[0] === 'workflow-node'))) {\n\n                if (this.force_first_input && (ele_last.closest(\".workflow_content_node\") !== null || ele_last.classList[0] === 'workflow-node')) {\n                    if (ele_last.closest(\".workflow_content_node\") != null) {\n                        input_id = ele_last.closest(\".workflow_content_node\").parentElement.id;\n                    } else {\n                        input_id = ele_last.id;\n                    }\n                    if (Object.keys(this.getNodeFromId(input_id.slice(5)).inputs).length === 0) {\n                        input_class = false;\n                    } else {\n                        input_class = \"input_1\";\n                    }\n\n\n                } else {\n                    // Fix connection;\n                    input_id = ele_last.parentElement.parentElement.id;\n                    input_class = ele_last.classList[1];\n                }\n                let output_id = this.ele_selected.parentElement.parentElement.id;\n                let output_class = this.ele_selected.classList[1];\n\n                if (output_id !== input_id && input_class !== false) {\n\n                    if (this.container.querySelectorAll('.connection.node_in_' + input_id + '.node_out_' + output_id + '.' + output_class + '.' + input_class).length === 0) {\n                        // Connection no exist save connection\n\n                        this.connection_ele.classList.add(\"node_in_\" + input_id);\n                        this.connection_ele.classList.add(\"node_out_\" + output_id);\n                        this.connection_ele.classList.add(output_class);\n                        this.connection_ele.classList.add(input_class);\n\n                        let [action, , status] = output_class.split(\"_\");\n\n                        let id_input = input_id.slice(5);\n                        let id_output = output_id.slice(5);\n\n                        let stepIn = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_input));\n                        let stepOut = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_output));\n                        let portIn = this.workflow.steps[stepIn].inputs.findIndex(step => step.name === input_class);\n                        let portOut = this.workflow.steps[stepOut].actions.findIndex(step => step.name === action);\n\n                        this.workflow.steps[stepIn].inputs[portIn]['steps'].push({\n                            \"step_id\": id_output,\n                            \"output\": output_class\n                        });\n                        this.workflow.steps[stepOut].actions[portOut][status] = id_input;\n\n                        this.updateConnectionNodes('node-' + id_output);\n                        this.updateConnectionNodes('node-' + id_input);\n                        this.dispatch('connectionCreated', {\n                            output_id: id_output,\n                            input_id: id_input,\n                            output_class: output_class,\n                            input_class: input_class\n                        });\n\n                    } else {\n                        this.connection_ele.remove();\n                    }\n\n                    this.connection_ele = null;\n                } else {\n                    // Connection exists Remove Connection;\n                    this.connection_ele.remove();\n                    this.connection_ele = null;\n                }\n\n            } else {\n                // Remove Connection;\n                this.connection_ele.remove();\n                this.connection_ele = null;\n            }\n        }\n\n        this.drag = false;\n        this.drag_point = false;\n        this.connection = false;\n        this.ele_selected = null;\n        this.editor_selected = false;\n\n    }\n\n    contextmenu(e) {\n        this.dispatch('contextmenu', e);\n        e.preventDefault();\n        if (this.editor_mode === 'fixed') {\n            return false;\n        }\n        if (this.precanvas.getElementsByClassName(\"workflow-delete\").length) {\n            this.precanvas.getElementsByClassName(\"workflow-delete\")[0].remove()\n        }\n        if (this.node_selected || this.connection_selected) {\n            let deleteBox = document.createElement('div');\n            deleteBox.classList.add(\"workflow-delete\");\n            deleteBox.innerHTML = \"x\";\n            if (this.node_selected) {\n                this.node_selected.appendChild(deleteBox);\n\n            }\n            if (this.connection_selected) {\n                deleteBox.style.top = e.clientY * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom))) + \"px\";\n                deleteBox.style.left = e.clientX * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom))) + \"px\";\n\n                this.precanvas.appendChild(deleteBox);\n\n            }\n\n        }\n\n    }\n\n    contextmenuDel() {\n        if (this.precanvas.getElementsByClassName(\"workflow-delete\").length) {\n            this.precanvas.getElementsByClassName(\"workflow-delete\")[0].remove()\n        }\n    }\n\n    key(e) {\n        this.dispatch('keydown', e);\n        if (this.editor_mode === 'fixed') {\n            return false;\n        }\n        if (e.key === 'Delete' || (e.key === 'Backspace' && e.metaKey)) {\n            if (this.node_selected != null) {\n                if (this.first_click.tagName !== 'INPUT' && this.first_click.tagName !== 'TEXTAREA' && this.first_click.hasAttribute('contenteditable') !== true) {\n                    this.removeNodeId(this.node_selected.id);\n                }\n            }\n            if (this.connection_selected != null) {\n                this.removeConnection();\n            }\n        }\n    }\n\n    zoom_enter(event, delta) {\n        if (event.ctrlKey) {\n            event.preventDefault()\n            if (event.deltaY > 0) {\n                // Zoom Out\n                this.zoom_out();\n            } else {\n                // Zoom In\n                this.zoom_in();\n            }\n        }\n    }\n\n    zoom_refresh() {\n        this.dispatch('zoom', this.zoom);\n        this.canvas_x = (this.canvas_x / this.zoom_last_value) * this.zoom;\n        this.canvas_y = (this.canvas_y / this.zoom_last_value) * this.zoom;\n        this.zoom_last_value = this.zoom;\n        this.precanvas.style.transform = \"translate(\" + this.canvas_x + \"px, \" + this.canvas_y + \"px) scale(\" + this.zoom + \")\";\n    }\n\n    zoom_in() {\n        if (this.zoom < this.zoom_max) {\n            this.zoom += this.zoom_value;\n            this.zoom_refresh();\n        }\n    }\n\n    zoom_out() {\n        if (this.zoom > this.zoom_min) {\n            this.zoom -= this.zoom_value;\n            this.zoom_refresh();\n        }\n    }\n\n    zoom_reset() {\n        if (this.zoom !== 1) {\n            this.zoom = 1;\n            this.zoom_refresh();\n        }\n    }\n\n    lock() {\n        this.editor_mode = 'fixed';\n    }\n\n    unlock() {\n        this.editor_mode = 'edit';\n    }\n\n    createCurvature(start_pos_x, start_pos_y, end_pos_x, end_pos_y, curvature_value, type) {\n        let line_x = start_pos_x;\n        let line_y = start_pos_y;\n        let x = end_pos_x;\n        let y = end_pos_y;\n        let curvature = curvature_value;\n\n        // let hx1 = line_x + Math.abs(x - line_x) * curvature;\n        // let hx2 = x - Math.abs(x - line_x) * curvature;\n\n        let hx1 = Math.max(line_x + 70, line_x + Math.abs(x - line_x) / 2);\n        let hx2 = Math.min(x - 70, x - Math.abs(x - line_x) / 2);\n        let mid = line_y - (line_y - y) / 2;\n\n        if (line_x > (x + 70))\n            mid = line_y - Math.abs(line_y - y) / 2;\n\n        // return ' M ' + line_x + ' ' + line_y + ' L ' + hx1 + ' ' + line_y + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y + ' M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 5) + '  L' + (x - 20) + ' ' + (y + 5) + ' Z' + ' M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 3) + '  L' + (x - 20) + ' ' + (y + 3) + ' Z' + ' M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 1) + '  L' + (x - 20) + ' ' + (y + 1) + ' Z';\n        // if (!mid)\n        //  return ' M '+ line_x +' '+ line_y +' L '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\n        // else\n        return ' M ' + line_x + ' ' + line_y + ' L ' + hx1 + ' ' + line_y + ' ' + hx1 + ' ' + mid + ' ' + hx2 + ' ' + mid + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y\n            + 'M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 5) + '  L' + (x - 20) + ' ' + (y + 5) + ' Z' + ' M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 3) + '  L' + (x - 20) + ' ' + (y + 3) + ' Z' + ' M ' + (x - 11) + ' ' + y + ' L' + (x - 20) + ' ' + (y - 1) + '  L' + (x - 20) + ' ' + (y + 1) + ' Z';\n    }\n\n    drawConnection(ele) {\n        let connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n        this.connection_ele = connection;\n        let path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n        path.classList.add(\"main-path\");\n        path.setAttributeNS(null, 'd', '');\n        let [_, outputClass] = ele.classList;\n        let [, , status] = outputClass.split(\"_\");\n        connection.classList.add(\"connection\");\n        if (status)\n            connection.setAttribute('status', status);\n        connection.appendChild(path);\n        this.precanvas.appendChild(connection);\n\n    };\n\n    updateConnection(eX, eY) {\n        const precanvas = this.precanvas;\n        const zoom = this.zoom;\n        let precanvasWitdhZoom = precanvas.clientWidth / (precanvas.clientWidth * zoom);\n        precanvasWitdhZoom = precanvasWitdhZoom || 0;\n        let precanvasHeightZoom = precanvas.clientHeight / (precanvas.clientHeight * zoom);\n        precanvasHeightZoom = precanvasHeightZoom || 0;\n        var path = this.connection_ele.children[0];\n\n        /*var line_x = this.ele_selected.offsetWidth/2 + this.line_path/2 + this.ele_selected.parentElement.parentElement.offsetLeft + this.ele_selected.offsetLeft;\n        var line_y = this.ele_selected.offsetHeight/2 + this.line_path/2 + this.ele_selected.parentElement.parentElement.offsetTop + this.ele_selected.offsetTop;*/\n\n        var line_x = this.ele_selected.offsetWidth / 2 + (this.ele_selected.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n        var line_y = this.ele_selected.offsetHeight / 2 + (this.ele_selected.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n        var x = eX * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)));\n        var y = eY * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)));\n\n        /*\n        var curvature = 0.5;\n        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n        var hx2 = x - Math.abs(x - line_x) * curvature;\n        */\n\n        //path.setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y);\n        var curvature = this.curvature;\n        var lineCurve = this.createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n        path.setAttributeNS(null, 'd', lineCurve);\n\n    }\n\n    addConnection(id_output, id_input, output_class, input_class) {\n        var nodeOneModule = this.getModuleFromNodeId(id_output);\n        var nodeTwoModule = this.getModuleFromNodeId(id_input);\n        if (nodeOneModule === nodeTwoModule) {\n\n            var dataNode = this.getNodeFromId(id_output);\n            var exist = false;\n            for (var checkOutput in dataNode.outputs[output_class].connections) {\n                var connectionSearch = dataNode.outputs[output_class].connections[checkOutput]\n                if (connectionSearch.node == id_input && connectionSearch.output == input_class) {\n                    exist = true;\n                }\n            }\n            // Check connection exist\n            if (exist === false) {\n                //Create Connection\n                this.workflow.workflow[nodeOneModule].steps[id_output].outputs[output_class].connections.push({\n                    \"node\": id_input.toString(),\n                    \"output\": input_class\n                });\n                this.workflow.workflow[nodeOneModule].steps[id_input].inputs[input_class].connections.push({\n                    \"node\": id_output.toString(),\n                    \"input\": output_class\n                });\n\n                if (this.module === nodeOneModule) {\n                    //Draw connection\n                    var connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n                    var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n                    path.classList.add(\"main-path\");\n                    path.setAttributeNS(null, 'd', '');\n                    // path.innerHTML = 'a';\n                    connection.classList.add(\"connection\");\n                    connection.classList.add(\"node_in_node-\" + id_input);\n                    connection.classList.add(\"node_out_node-\" + id_output);\n                    connection.classList.add(output_class);\n                    connection.classList.add(input_class);\n                    connection.appendChild(path);\n                    this.precanvas.appendChild(connection);\n                    this.updateConnectionNodes('node-' + id_output);\n                    this.updateConnectionNodes('node-' + id_input);\n                }\n\n                this.dispatch('connectionCreated', {\n                    output_id: id_output,\n                    input_id: id_input,\n                    output_class: output_class,\n                    input_class: input_class\n                });\n            }\n        }\n    }\n\n    updateConnectionNodes(id) {\n        const idSearch = 'node_in_' + id;\n        const idSearchOut = 'node_out_' + id;\n        var line_path = this.line_path / 2;\n        const precanvas = this.precanvas;\n        const curvature = this.curvature;\n        const createCurvature = this.createCurvature;\n        const reroute_curvature = this.reroute_curvature;\n        const reroute_curvature_start_end = this.reroute_curvature_start_end;\n        const reroute_fix_curvature = this.reroute_fix_curvature;\n        const rerouteWidth = this.reroute_width;\n        const zoom = this.zoom;\n        let precanvasWitdhZoom = precanvas.clientWidth / (precanvas.clientWidth * zoom);\n        precanvasWitdhZoom = precanvasWitdhZoom || 0;\n        let precanvasHeightZoom = precanvas.clientHeight / (precanvas.clientHeight * zoom);\n        precanvasHeightZoom = precanvasHeightZoom || 0;\n\n\n        const elemsOut = document.getElementsByClassName(idSearchOut);\n        Object.keys(elemsOut).forEach((item, index) => {\n            if (elemsOut[item].querySelector('.point') === null) {\n\n                var elemtsearchId_out = document.getElementById(id);\n\n                var id_search = elemsOut[item].classList[1].replace('node_in_', '');\n                var elemtsearchId = document.getElementById(id_search);\n\n                var elemtsearch = elemtsearchId.querySelectorAll('.' + elemsOut[item].classList[4])[0]\n\n                /*var eX = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                var eY = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                var eX = elemtsearch.offsetWidth / 2 + (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                var eY = elemtsearch.offsetHeight / 2 + (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n\n                var elemtsearchOut = elemtsearchId_out.querySelectorAll('.' + elemsOut[item].classList[3])[0]\n                /*var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetWidth/2 + line_path;\n                var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0].offsetHeight/2 + line_path;*/\n                var line_x = elemtsearchOut.offsetWidth / 2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                var line_y = elemtsearchOut.offsetHeight / 2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                var x = eX;\n                var y = eY;\n                /*\n                var curvature = 0.5;\n                var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                var hx2 = x - Math.abs(x - line_x) * curvature;\n                // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\n                elemsOut[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\n                */\n\n                const lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n                elemsOut[item].children[0].setAttributeNS(null, 'd', lineCurve);\n            } else {\n                const points = elemsOut[item].querySelectorAll('.point');\n                let linecurve = '';\n                const reoute_fix = [];\n                points.forEach((item, i) => {\n                    if (i === 0 && ((points.length - 1) === 0)) {\n                        // M line_x line_y C hx1 line_y hx2 y x y\n                        var elemtsearchId_out = document.getElementById(id);\n                        var elemtsearch = item;\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n\n                        /*var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetWidth/2 + line_path;\n                        var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetHeight/2 + line_path;*/\n                        var elemtsearchOut = elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0]\n                        var line_x = elemtsearchOut.offsetWidth / 2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var line_y = elemtsearchOut.offsetHeight / 2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n                        var x = eX;\n                        var y = eY;\n\n                        /*var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                        //var elemtsearchId_out = document.getElementById(id);\n                        var elemtsearchId_out = item;\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\n                        var elemtsearchId = document.getElementById(id_search);\n                        var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n\n\n                        /*var eX = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                        var eY = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n                        var eX = elemtsearchIn.offsetWidth / 2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var eY = elemtsearchIn.offsetHeight / 2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\n                        */\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                    } else if (i === 0) {\n                        //console.log(\"Primero\");\n                        // M line_x line_y C hx1 line_y hx2 y x y\n                        // FIRST\n                        var elemtsearchId_out = document.getElementById(id);\n                        var elemtsearch = item;\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n\n                        /*var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetWidth/2 + line_path;\n                        var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0].offsetHeight/2 + line_path;*/\n                        var elemtsearchOut = elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0]\n                        var line_x = elemtsearchOut.offsetWidth / 2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var line_y = elemtsearchOut.offsetHeight / 2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                        // SECOND\n                        var elemtsearchId_out = item;\n                        var elemtsearch = points[i + 1];\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = reroute_curvature;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n\n                    } else if (i === (points.length - 1)) {\n                        //console.log(\"Final\");\n                        var elemtsearchId_out = item;\n\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\n                        var elemtsearchId = document.getElementById(id_search);\n                        var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n\n                        /*var eX = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                        var eY = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n                        var eX = elemtsearchIn.offsetWidth / 2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var eY = elemtsearchIn.offsetHeight / 2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                    } else {\n                        var elemtsearchId_out = item;\n                        var elemtsearch = points[i + 1];\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = reroute_curvature;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n                    }\n\n                });\n                if (reroute_fix_curvature) {\n                    reoute_fix.forEach((itempath, i) => {\n                        elemsOut[item].children[i].setAttributeNS(null, 'd', itempath);\n                    });\n\n                } else {\n                    elemsOut[item].children[0].setAttributeNS(null, 'd', linecurve);\n                }\n\n            }\n        })\n\n        const elems = document.getElementsByClassName(idSearch);\n        Object.keys(elems).forEach((item, index) => {\n            // console.log(\"In\")\n            if (elems[item].querySelector('.point') === null) {\n                var elemtsearchId_in = document.getElementById(id);\n\n                var id_search = elems[item].classList[2].replace('node_out_', '');\n                var elemtsearchId = document.getElementById(id_search);\n                var elemtsearch = elemtsearchId.querySelectorAll('.' + elems[item].classList[3])[0]\n\n                /*var line_x = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                var line_y = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n\n                var line_x = elemtsearch.offsetWidth / 2 + (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                var line_y = elemtsearch.offsetHeight / 2 + (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n\n                /*var x = elemtsearchId_in.offsetLeft + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetLeft + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetWidth/2 + line_path;\n                var y = elemtsearchId_in.offsetTop + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetTop + elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0].offsetHeight/2 + line_path;*/\n                var elemtsearchId_in = elemtsearchId_in.querySelectorAll('.' + elems[item].classList[4])[0]\n                var x = elemtsearchId_in.offsetWidth / 2 + (elemtsearchId_in.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                var y = elemtsearchId_in.offsetHeight / 2 + (elemtsearchId_in.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                /*\n                var curvature = 0.5;\n                var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                var hx2 = x - Math.abs(x - line_x) * curvature;\n                // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\n                elems[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );*/\n                const lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n                elems[item].children[0].setAttributeNS(null, 'd', lineCurve);\n\n            } else {\n                const points = elems[item].querySelectorAll('.point');\n                let linecurve = '';\n                const reoute_fix = [];\n                points.forEach((item, i) => {\n                    if (i === 0 && ((points.length - 1) === 0)) {\n                        // M line_x line_y C hx1 line_y hx2 y x y\n                        var elemtsearchId_out = document.getElementById(id);\n                        var elemtsearch = item;\n\n                        var line_x = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n\n\n                        var elemtsearchIn = elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[4])[0]\n                        var eX = elemtsearchIn.offsetWidth / 2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var eY = elemtsearchIn.offsetHeight / 2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                        /*var eX = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[4])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[4])[0].offsetWidth/2 + line_path;\n                        var eY = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[4])[0].offsetTop + elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[4])[0].offsetHeight/2 + line_path;*/\n\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                        //var elemtsearchId_out = document.getElementById(id);\n                        var elemtsearchId_out = item;\n\n                        var id_search = item.parentElement.classList[2].replace('node_out_', '');\n                        var elemtsearchId = document.getElementById(id_search);\n                        var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0]\n\n                        /*var line_x = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                        var line_y = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                        var elemtsearchOut = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0]\n                        var line_x = elemtsearchOut.offsetWidth / 2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var line_y = elemtsearchOut.offsetHeight / 2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                        var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n\n                    } else if (i === 0) {\n                        // M line_x line_y C hx1 line_y hx2 y x y\n                        // FIRST\n                        var elemtsearchId_out = item;\n                        var id_search = item.parentElement.classList[2].replace('node_out_', '');\n                        var elemtsearchId = document.getElementById(id_search);\n                        var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0]\n\n                        /*var line_x = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                        var line_y = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                        var elemtsearchOut = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0]\n                        var line_x = elemtsearchOut.offsetWidth / 2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var line_y = elemtsearchOut.offsetHeight / 2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                        var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                        // SECOND\n                        var elemtsearchId_out = item;\n                        var elemtsearch = points[i + 1];\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n\n                        /*\n                        var curvature = reroute_curvature;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                    } else if (i === (points.length - 1)) {\n\n                        var elemtsearchId_out = item;\n\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\n                        var elemtsearchId = document.getElementById(id_search);\n                        var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n\n                        /*var eX = elemtsearch.offsetWidth/2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n                        var eY = elemtsearch.offsetHeight/2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;*/\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0]\n                        var eX = elemtsearchIn.offsetWidth / 2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom;\n                        var eY = elemtsearchIn.offsetHeight / 2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom;\n\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = 0.5;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n\n                    } else {\n\n                        var elemtsearchId_out = item;\n                        var elemtsearch = points[i + 1];\n\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * precanvasWitdhZoom + rerouteWidth;\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * precanvasHeightZoom + rerouteWidth;\n                        var x = eX;\n                        var y = eY;\n                        /*\n                        var curvature = reroute_curvature;\n                        var hx1 = line_x + Math.abs(x - line_x) * curvature;\n                        var hx2 = x - Math.abs(x - line_x) * curvature;\n                        linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\n                        */\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n                        linecurve += lineCurveSearch;\n                        reoute_fix.push(lineCurveSearch);\n                    }\n\n                });\n                if (reroute_fix_curvature) {\n                    reoute_fix.forEach((itempath, i) => {\n                        elems[item].children[i].setAttributeNS(null, 'd', itempath);\n                    });\n\n                } else {\n                    elems[item].children[0].setAttributeNS(null, 'd', linecurve);\n                }\n\n            }\n        })\n    }\n\n\n    dblclick(e) {\n        if (this.connection_selected != null && this.reroute) {\n            this.createReroutePoint(this.connection_selected);\n        }\n\n        if (e.target.classList[0] === 'point') {\n            this.removeReroutePoint(e.target);\n        }\n    }\n\n    createReroutePoint(ele) {\n        this.connection_selected.classList.remove(\"selected\");\n        const nodeUpdate = this.connection_selected.parentElement.classList[2].slice(9);\n        const nodeUpdateIn = this.connection_selected.parentElement.classList[1].slice(13);\n        const output_class = this.connection_selected.parentElement.classList[3];\n        const input_class = this.connection_selected.parentElement.classList[4];\n        this.connection_selected = null;\n        const point = document.createElementNS('http://www.w3.org/2000/svg', \"circle\");\n        point.classList.add(\"point\");\n        var pos_x = this.pos_x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)));\n        var pos_y = this.pos_y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)));\n\n        point.setAttributeNS(null, 'cx', pos_x);\n        point.setAttributeNS(null, 'cy', pos_y);\n        point.setAttributeNS(null, 'r', this.reroute_width);\n\n        let position_add_array_point = 0;\n        if (this.reroute_fix_curvature) {\n\n            const numberPoints = ele.parentElement.querySelectorAll(\".main-path\").length;\n            var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n            path.classList.add(\"main-path\");\n            path.setAttributeNS(null, 'd', '');\n\n            ele.parentElement.insertBefore(path, ele.parentElement.children[numberPoints]);\n            if (numberPoints === 1) {\n                ele.parentElement.appendChild(point);\n            } else {\n                const search_point = Array.from(ele.parentElement.children).indexOf(ele)\n                position_add_array_point = search_point;\n                ele.parentElement.insertBefore(point, ele.parentElement.children[search_point + numberPoints + 1]);\n            }\n\n\n        } else {\n            ele.parentElement.appendChild(point);\n        }\n\n\n        const nodeId = nodeUpdate.slice(5);\n        const searchConnection = this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n            return item.node === nodeUpdateIn && item.output === input_class;\n        });\n\n        if (this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points === undefined) {\n            this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points = [];\n        }\n        //this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.push({ pos_x: pos_x, pos_y: pos_y });\n\n\n        if (this.reroute_fix_curvature) {\n            //console.log(position_add_array_point)\n            if (position_add_array_point > 0) {\n                this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.splice(position_add_array_point, 0, {\n                    pos_x: pos_x,\n                    pos_y: pos_y\n                });\n            } else {\n                this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.push({\n                    pos_x: pos_x,\n                    pos_y: pos_y\n                });\n            }\n\n            ele.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\n                item.classList.remove(\"selected\");\n            });\n\n        } else {\n            this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.push({\n                pos_x: pos_x,\n                pos_y: pos_y\n            });\n        }\n\n\n        /*\n        this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.sort((a,b) => (a.pos_x > b.pos_x) ? 1 : (b.pos_x > a.pos_x ) ? -1 : 0 );\n        this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.forEach((item, i) => {\n            ele.parentElement.children[i+1].setAttributeNS(null, 'cx', item.pos_x);\n            ele.parentElement.children[i+1].setAttributeNS(null, 'cy', item.pos_y);\n        });*/\n\n        this.dispatch('addReroute', nodeId);\n        this.updateConnectionNodes(nodeUpdate);\n    }\n\n    removeReroutePoint(ele) {\n        const nodeUpdate = ele.parentElement.classList[2].slice(9)\n        const nodeUpdateIn = ele.parentElement.classList[1].slice(13);\n        const output_class = ele.parentElement.classList[3];\n        const input_class = ele.parentElement.classList[4];\n\n\n        let numberPointPosition = Array.from(ele.parentElement.children).indexOf(ele) - 1;\n\n        const nodeId = nodeUpdate.slice(5);\n        const searchConnection = this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n            return item.node === nodeUpdateIn && item.output === input_class;\n        });\n\n        if (this.reroute_fix_curvature) {\n\n            const numberMainPath = ele.parentElement.querySelectorAll(\".main-path\").length\n            ele.parentElement.children[numberMainPath - 1].remove();\n            numberPointPosition -= numberMainPath;\n            if (numberPointPosition < 0) {\n                numberPointPosition = 0;\n            }\n        }\n        //console.log(numberPointPosition);\n        this.workflow.workflow[this.module].steps[nodeId].outputs[output_class].connections[searchConnection].points.splice(numberPointPosition, 1);\n\n        ele.remove();\n        this.dispatch('removeReroute', nodeId);\n        this.updateConnectionNodes(nodeUpdate);\n\n    }\n\n    registerNode(name, html, props = null, options = null) {\n        this.noderegister[name] = {html: html, props: props, options: options};\n    }\n\n    getNodeFromId(id) {\n        let moduleName = this.getModuleFromNodeId(id)\n        return JSON.parse(JSON.stringify(this.workflow.workflow[moduleName].steps[id]));\n    }\n\n    getNodesFromName(name) {\n        let nodes = [];\n        const editor = this.workflow.workflow\n        Object.keys(editor).map(function (moduleName, index) {\n            for (let node in editor[moduleName].steps) {\n                if (editor[moduleName].steps[node].name == name) {\n                    nodes.push(editor[moduleName].steps[node].id);\n                }\n            }\n        });\n        return nodes;\n    }\n\n    addNode(data, ele_pos_x, ele_pos_y, html) {\n        let {\n            name = '',\n            description = '',\n            action,\n            action_target,\n            targets = [],\n            is_first\n        } = data;\n\n        const parent = document.createElement('div');\n        parent.classList.add(\"parent-node\");\n\n        const node = document.createElement('div');\n        node.innerHTML = \"\";\n        node.setAttribute(\"id\", \"node-\" + this.nodeId);\n        node.classList.add(\"workflow-node\");\n\n        const inputs = document.createElement('div');\n        inputs.classList.add(\"inputs\");\n        const outputs = document.createElement('div');\n        outputs.classList.add(\"outputs\");\n\n        let jsonInput = [];\n        let jsonOutput = [];\n\n        if (action && action_target) {\n\n            if (!is_first) {\n                let inputItem = {\n                    name: \"\",\n                    steps: []\n                };\n\n                ['default'].forEach(value => {\n                    let input = document.createElement('div');\n                    input.classList.add(\"input\");\n                    input.classList.add(`input_${value}`);\n                    inputItem.name = `input_${value}`;\n                    inputs.appendChild(input);\n                });\n\n                jsonInput.push(inputItem);\n            }\n\n            let outputItem = {\n                name: action.value,\n                target_type: action_target.value\n            };\n\n            ['pass', 'reject'].forEach(value => {\n                let output = document.createElement('div');\n                output.classList.add(\"output\");\n                output.classList.add(`${action.value}_output_${value}`);\n                outputItem[value] = null;\n                outputs.appendChild(output)\n            })\n\n            jsonOutput.push(outputItem)\n        }\n\n\n        const content = document.createElement('div');\n        content.classList.add(\"workflow_content_node\");\n\n        content.innerHTML = html;\n\n        node.appendChild(inputs);\n        node.appendChild(content);\n        node.appendChild(outputs);\n        node.style.top = ele_pos_y + \"px\";\n        node.style.left = ele_pos_x + \"px\";\n        parent.appendChild(node);\n        this.precanvas.appendChild(parent);\n\n        this.workflow.steps.push({\n            step_id: this.nodeId,\n            description: description,\n            name: name,\n            html: html,\n            is_first: is_first,\n            inputs: jsonInput,\n            actions: jsonOutput,\n            targets: targets.length > 0 ? targets.map(target => ({\n                id: target.id,\n                name: target.name,\n                type: target.type,\n                action: target.action\n            })) : [],\n            pos_x: ele_pos_x,\n            pos_y: ele_pos_y,\n        });\n\n        this.dispatch('nodeCreated', this.nodeId);\n\n        return ++this.nodeId;\n    }\n\n    addNodeImport(dataNode, preCanvas) {\n        const parent = document.createElement('div');\n        parent.classList.add(\"parent-node\");\n\n        const node = document.createElement('div');\n        node.innerHTML = \"\";\n        node.setAttribute(\"id\", \"node-\" + dataNode.step_id);\n        node.classList.add(\"workflow-node\");\n        if (dataNode.class !== '') {\n            node.classList.add(dataNode.class);\n        }\n\n        //input\n        const inputs = document.createElement('div');\n        inputs.classList.add(\"inputs\");\n\n        if (!dataNode.is_first)\n            dataNode.inputs.forEach((input_item, index) => {\n                const input = document.createElement('div');\n                input.classList.add(\"input\");\n                input.classList.add(input_item.name);\n                inputs.appendChild(input);\n\n                input_item['steps'].forEach((output_item, index) => {\n\n                    let connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n                    let path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n                    path.classList.add(\"main-path\");\n                    path.setAttributeNS(null, 'd', '');\n                    // path.innerHTML = 'a';\n                    connection.classList.add(\"connection\");\n                    connection.classList.add(\"node_in_node-\" + dataNode.step_id);\n                    connection.classList.add(\"node_out_node-\" + output_item.step_id);\n                    let [, , status] = output_item.output.split(\"_\");\n\n                    connection.classList.add(\"connection\");\n                    if (status)\n                        connection.setAttribute('status', status);\n\n                    connection.classList.add(output_item.output);\n                    connection.classList.add(input_item.name);\n\n                    connection.appendChild(path);\n                    preCanvas.appendChild(connection);\n\n                });\n            });\n\n        //output\n        const outputs = document.createElement('div');\n        outputs.classList.add(\"outputs\");\n        dataNode.actions.forEach(action => {\n            ['pass', 'reject'].forEach(value => {\n                let output = document.createElement('div');\n                output.classList.add(\"output\");\n                output.classList.add(`${action.name}_output_${value}`);\n                outputs.appendChild(output)\n            })\n        })\n\n        const content = document.createElement('div');\n        content.classList.add(\"workflow_content_node\");\n        //content.innerHTML = dataNode.html;\n\n        content.innerHTML = dataNode.html;\n\n        node.appendChild(inputs);\n        node.appendChild(content);\n        node.appendChild(outputs);\n        node.style.top = dataNode.pos_y + \"px\";\n        node.style.left = dataNode.pos_x + \"px\";\n        parent.appendChild(node);\n        this.precanvas.appendChild(parent);\n    }\n\n    updateNodeValue(event) {\n        let attr = event.target.attributes\n        for (let i = 0; i < attr.length; i++) {\n            if (attr[i].nodeName.startsWith('df-')) {\n                this.workflow.steps[event.target.closest(\".workflow_content_node\").parentElement.id.slice(5)].data[attr[i].nodeName.slice(3)] = event.target.value;\n            }\n\n        }\n    }\n\n\n    removeNodeId(id) {\n\n        this.removeConnectionNodeId(id);\n        let idElems = document.getElementById(id);\n        idElems && idElems.parentNode.remove();\n\n        this.workflow.steps = this.workflow.steps.filter(step => step.step_id !== parseInt(id.slice(5)));\n\n        this.dispatch('nodeRemoved', id.slice(5));\n    }\n\n    removeConnection() {\n        if (this.connection_selected != null) {\n            let listClass = this.connection_selected.parentElement.classList;\n            this.connection_selected.parentElement.remove();\n            const [, nodeIn, nodeOut, output_class, input_class] = listClass;\n\n            let [action, , status] = output_class.split(\"_\");\n\n            let id_input = nodeIn.slice(13);\n            let id_output = nodeOut.slice(14);\n\n            let stepIn = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_input));\n            let stepOut = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_output));\n            let portIn = this.workflow.steps[stepIn].inputs.findIndex(step => step.name === input_class);\n            let portOut = this.workflow.steps[stepOut].actions.findIndex(step => step.name === action);\n\n\n            let inputItemIndex = this.workflow.steps[stepIn].inputs[portIn]['steps'].findIndex(item => {\n                return item[\"step_id\"] === id_output && item[\"output\"] === output_class\n            });\n\n            this.workflow.steps[stepIn].inputs[portIn]['steps'].splice(inputItemIndex, 1);\n\n            this.workflow.steps[stepOut].actions[portOut][status] = null;\n\n            this.dispatch('connectionRemoved', {\n                output_id: id_output,\n                input_id: id_input,\n                output_class: output_class,\n                input_class: input_class\n            });\n\n            this.connection_selected = null;\n        }\n    }\n\n    // removeSingleConnection(id_output, id_input, output_class, input_class) {\n    //     let nodeOneModule = this.getModuleFromNodeId(id_output);\n    //     let nodeTwoModule = this.getModuleFromNodeId(id_input);\n    //     if (nodeOneModule === nodeTwoModule) {\n    //         // Check nodes in same module.\n    //\n    //         // Check connection exist\n    //         var exists = this.workflow.workflow[nodeOneModule].steps[id_output].outputs[output_class].connections.findIndex(function (item, i) {\n    //             return item.node == id_input && item.output === input_class\n    //         });\n    //         if (exists > -1) {\n    //\n    //             if (this.module === nodeOneModule) {\n    //                 // In same module with view.\n    //                 document.querySelector('.connection.node_in_node-' + id_input + '.node_out_node-' + id_output + '.' + output_class + '.' + input_class).remove();\n    //             }\n    //\n    //             var index_out = this.workflow.workflow[nodeOneModule].steps[id_output].outputs[output_class].connections.findIndex(function (item, i) {\n    //                 return item.node == id_input && item.output === input_class\n    //             });\n    //             this.workflow.workflow[nodeOneModule].steps[id_output].outputs[output_class].connections.splice(index_out, 1);\n    //\n    //             var index_in = this.workflow.workflow[nodeOneModule].steps[id_input].inputs[input_class].connections.findIndex(function (item, i) {\n    //                 return item.node == id_output && item.input === output_class\n    //             });\n    //             this.workflow.workflow[nodeOneModule].steps[id_input].inputs[input_class].connections.splice(index_in, 1);\n    //\n    //             this.dispatch('connectionRemoved', {\n    //                 output_id: id_output,\n    //                 input_id: id_input,\n    //                 output_class: output_class,\n    //                 input_class: input_class\n    //             });\n    //             return true;\n    //\n    //         } else {\n    //             return false;\n    //         }\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    removeConnectionNodeId(id) {\n        const idSearchIn = 'node_in_' + id;\n        const idSearchOut = 'node_out_' + id;\n\n        const elemsOut = document.getElementsByClassName(idSearchOut);\n        for (let i = elemsOut.length - 1; i >= 0; i--) {\n            let listClass = elemsOut[i].classList;\n\n            const [, nodeIn, nodeOut, output_class, input_class] = listClass;\n\n            let [action, , status] = output_class.split(\"_\");\n\n            let id_input = nodeIn.slice(13);\n            let id_output = nodeOut.slice(14);\n\n            let stepIn = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_input));\n            let stepOut = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_output));\n            let portIn = this.workflow.steps[stepIn].inputs.findIndex(step => step.name === input_class);\n            let portOut = this.workflow.steps[stepOut].actions.findIndex(step => step.name === action);\n\n\n            let inputItemIndex = this.workflow.steps[stepIn].inputs[portIn]['steps'].findIndex(item => {\n                return item[\"step_id\"] === id_output && item[\"output\"] === output_class\n            });\n\n            this.workflow.steps[stepIn].inputs[portIn]['steps'].splice(inputItemIndex, 1);\n\n            this.workflow.steps[stepOut].actions[portOut][status] = null;\n\n            elemsOut[i].remove();\n\n            this.dispatch('connectionRemoved', {\n                output_id: nodeOut,\n                input_id: nodeIn,\n                output_class: output_class,\n                input_class: input_class\n            });\n        }\n\n        const elemsIn = document.getElementsByClassName(idSearchIn);\n\n        for (let i = elemsIn.length - 1; i >= 0; i--) {\n\n            let listClass = elemsIn[i].classList;\n\n            const [, nodeIn, nodeOut, output_class, input_class] = listClass;\n\n            let [action, , status] = output_class.split(\"_\");\n\n            let id_input = nodeIn.slice(13);\n            let id_output = nodeOut.slice(14);\n\n            let stepIn = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_input));\n            let stepOut = this.workflow.steps.findIndex(step => step.step_id === parseInt(id_output));\n            let portIn = this.workflow.steps[stepIn].inputs.findIndex(step => step.name === input_class);\n            let portOut = this.workflow.steps[stepOut].actions.findIndex(step => step.name === action);\n\n\n            let inputItemIndex = this.workflow.steps[stepIn].inputs[portIn]['steps'].findIndex(item => {\n                return item[\"step_id\"] === id_output && item[\"output\"] === output_class\n            });\n\n            this.workflow.steps[stepIn].inputs[portIn]['steps'].splice(inputItemIndex, 1);\n\n            this.workflow.steps[stepOut].actions[portOut][status] = null;\n\n            elemsIn[i].remove();\n\n            this.dispatch('connectionRemoved', {\n                output_id: nodeOut,\n                input_id: nodeIn,\n                output_class: output_class,\n                input_class: input_class\n            });\n        }\n    }\n\n    // getModuleFromNodeId(id) {\n    //     var nameModule;\n    //     const editor = this.drawflow.drawflow\n    //     Object.keys(editor).map(function (moduleName, index) {\n    //         Object.keys(editor[moduleName].data).map(function (node, index2) {\n    //             if (node == id) {\n    //                 nameModule = moduleName;\n    //             }\n    //         })\n    //     });\n    //     return nameModule;\n    // }\n\n\n    clear() {\n        if (this.precanvas) {\n            this.precanvas.innerHTML = \"\";\n        }\n        this.workflow = {steps: []};\n    }\n\n    export() {\n        const dataExport = this.workflow;\n        this.dispatch('export', dataExport);\n        return dataExport;\n    }\n\n    import(data) {\n\n        this.clear()\n        this.workflow = data;\n        this.start();\n        this.dispatch('import', 'import');\n    }\n\n    /* Events */\n    on(event, callback) {\n        // Check if the callback is not a function\n        if (typeof callback !== 'function') {\n            console.error(`The listener callback must be a function, the given type is ${typeof callback}`);\n            return false;\n        }\n\n\n        // Check if the event is not a string\n        if (typeof event !== 'string') {\n            console.error(`The event name must be a string, the given type is ${typeof event}`);\n            return false;\n        }\n\n        // Check if this event not exists\n        if (this.events[event] === undefined) {\n            this.events[event] = {\n                listeners: []\n            }\n        }\n\n        this.events[event].listeners.push(callback);\n    }\n\n    removeListener(event, callback) {\n        // Check if this event not exists\n        if (this.events[event] === undefined) {\n            //console.error(`This event: ${event} does not exist`);\n            return false;\n        }\n\n        this.events[event].listeners = this.events[event].listeners.filter(listener => {\n            return listener.toString() !== callback.toString();\n        });\n    }\n\n    dispatch(event, details) {\n        // Check if this event not exists\n        if (this.events[event] === undefined) {\n            // console.error(`This event: ${event} does not exist`);\n            return false;\n        }\n\n        this.events[event].listeners.forEach((listener) => {\n            listener(details);\n        });\n    }\n\n\n}",{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":1,"column":16,"nodeType":"171","messageId":"172","endLine":1,"endColumn":25},{"ruleId":"173","severity":1,"message":"174","line":59,"column":13,"nodeType":"175","messageId":"176","endLine":74,"endColumn":14},{"ruleId":"177","severity":1,"message":"178","line":72,"column":8,"nodeType":"179","endLine":72,"endColumn":16,"suggestions":"180"},{"ruleId":"165","replacedBy":"181"},{"ruleId":"167","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":338,"column":13,"nodeType":"171","messageId":"185","endLine":338,"endColumn":14},{"ruleId":"183","severity":1,"message":"186","line":339,"column":13,"nodeType":"171","messageId":"185","endLine":339,"endColumn":14},{"ruleId":"183","severity":1,"message":"184","line":341,"column":44,"nodeType":"171","messageId":"185","endLine":341,"endColumn":45},{"ruleId":"183","severity":1,"message":"186","line":341,"column":50,"nodeType":"171","messageId":"185","endLine":341,"endColumn":51},{"ruleId":"183","severity":1,"message":"184","line":342,"column":61,"nodeType":"171","messageId":"185","endLine":342,"endColumn":62},{"ruleId":"183","severity":1,"message":"186","line":342,"column":74,"nodeType":"171","messageId":"185","endLine":342,"endColumn":75},{"ruleId":"169","severity":1,"message":"187","line":644,"column":13,"nodeType":"171","messageId":"172","endLine":644,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":661,"column":117,"nodeType":"190","messageId":"191","endLine":661,"endColumn":118},{"ruleId":"188","severity":1,"message":"189","line":661,"column":222,"nodeType":"190","messageId":"191","endLine":661,"endColumn":223},{"ruleId":"169","severity":1,"message":"192","line":670,"column":14,"nodeType":"171","messageId":"172","endLine":670,"endColumn":15},{"ruleId":"193","severity":1,"message":"194","line":720,"column":43,"nodeType":"190","messageId":"195","endLine":720,"endColumn":45},{"ruleId":"193","severity":1,"message":"194","line":720,"column":82,"nodeType":"190","messageId":"195","endLine":720,"endColumn":84},{"ruleId":"169","severity":1,"message":"196","line":767,"column":13,"nodeType":"171","messageId":"172","endLine":767,"endColumn":22},{"ruleId":"197","severity":1,"message":"198","line":847,"column":29,"nodeType":"171","messageId":"199","endLine":847,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":850,"column":29,"nodeType":"171","messageId":"199","endLine":850,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":856,"column":29,"nodeType":"171","messageId":"199","endLine":856,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":857,"column":29,"nodeType":"171","messageId":"199","endLine":857,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":860,"column":29,"nodeType":"171","messageId":"199","endLine":860,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":861,"column":29,"nodeType":"171","messageId":"199","endLine":861,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":862,"column":29,"nodeType":"171","messageId":"199","endLine":862,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":863,"column":29,"nodeType":"171","messageId":"199","endLine":863,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":870,"column":29,"nodeType":"171","messageId":"199","endLine":870,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":878,"column":29,"nodeType":"171","messageId":"199","endLine":878,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":879,"column":29,"nodeType":"171","messageId":"199","endLine":879,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":881,"column":29,"nodeType":"171","messageId":"199","endLine":881,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":882,"column":29,"nodeType":"171","messageId":"199","endLine":882,"endColumn":31},{"ruleId":"197","severity":1,"message":"208","line":886,"column":29,"nodeType":"171","messageId":"199","endLine":886,"endColumn":43},{"ruleId":"197","severity":1,"message":"203","line":887,"column":29,"nodeType":"171","messageId":"199","endLine":887,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":888,"column":29,"nodeType":"171","messageId":"199","endLine":888,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":890,"column":29,"nodeType":"171","messageId":"199","endLine":890,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":891,"column":29,"nodeType":"171","messageId":"199","endLine":891,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":897,"column":29,"nodeType":"171","messageId":"199","endLine":897,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":902,"column":29,"nodeType":"171","messageId":"199","endLine":902,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":903,"column":29,"nodeType":"171","messageId":"199","endLine":903,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":905,"column":29,"nodeType":"171","messageId":"199","endLine":905,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":906,"column":29,"nodeType":"171","messageId":"199","endLine":906,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":907,"column":29,"nodeType":"171","messageId":"199","endLine":907,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":908,"column":29,"nodeType":"171","messageId":"199","endLine":908,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":909,"column":29,"nodeType":"171","messageId":"199","endLine":909,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":910,"column":29,"nodeType":"171","messageId":"199","endLine":910,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":916,"column":29,"nodeType":"171","messageId":"199","endLine":916,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":923,"column":29,"nodeType":"171","messageId":"199","endLine":923,"endColumn":46},{"ruleId":"197","severity":1,"message":"209","line":925,"column":29,"nodeType":"171","messageId":"199","endLine":925,"endColumn":38},{"ruleId":"197","severity":1,"message":"210","line":926,"column":29,"nodeType":"171","messageId":"199","endLine":926,"endColumn":42},{"ruleId":"197","severity":1,"message":"200","line":927,"column":29,"nodeType":"171","messageId":"199","endLine":927,"endColumn":40},{"ruleId":"197","severity":1,"message":"211","line":931,"column":29,"nodeType":"171","messageId":"199","endLine":931,"endColumn":42},{"ruleId":"197","severity":1,"message":"201","line":932,"column":29,"nodeType":"171","messageId":"199","endLine":932,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":933,"column":29,"nodeType":"171","messageId":"199","endLine":933,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":934,"column":29,"nodeType":"171","messageId":"199","endLine":934,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":935,"column":29,"nodeType":"171","messageId":"199","endLine":935,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":936,"column":29,"nodeType":"171","messageId":"199","endLine":936,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":937,"column":29,"nodeType":"171","messageId":"199","endLine":937,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":944,"column":29,"nodeType":"171","messageId":"199","endLine":944,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":949,"column":29,"nodeType":"171","messageId":"199","endLine":949,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":950,"column":29,"nodeType":"171","messageId":"199","endLine":950,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":952,"column":29,"nodeType":"171","messageId":"199","endLine":952,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":953,"column":29,"nodeType":"171","messageId":"199","endLine":953,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":954,"column":29,"nodeType":"171","messageId":"199","endLine":954,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":955,"column":29,"nodeType":"171","messageId":"199","endLine":955,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":956,"column":29,"nodeType":"171","messageId":"199","endLine":956,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":957,"column":29,"nodeType":"171","messageId":"199","endLine":957,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":963,"column":29,"nodeType":"171","messageId":"199","endLine":963,"endColumn":44},{"ruleId":"197","severity":1,"message":"212","line":1000,"column":21,"nodeType":"171","messageId":"199","endLine":1000,"endColumn":37},{"ruleId":"197","severity":1,"message":"198","line":1046,"column":29,"nodeType":"171","messageId":"199","endLine":1046,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":1050,"column":29,"nodeType":"171","messageId":"199","endLine":1050,"endColumn":40},{"ruleId":"197","severity":1,"message":"203","line":1055,"column":29,"nodeType":"171","messageId":"199","endLine":1055,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":1056,"column":29,"nodeType":"171","messageId":"199","endLine":1056,"endColumn":35},{"ruleId":"197","severity":1,"message":"201","line":1058,"column":29,"nodeType":"171","messageId":"199","endLine":1058,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":1059,"column":29,"nodeType":"171","messageId":"199","endLine":1059,"endColumn":31},{"ruleId":"197","severity":1,"message":"205","line":1060,"column":29,"nodeType":"171","messageId":"199","endLine":1060,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":1061,"column":29,"nodeType":"171","messageId":"199","endLine":1061,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":1067,"column":29,"nodeType":"171","messageId":"199","endLine":1067,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":1075,"column":29,"nodeType":"171","messageId":"199","endLine":1075,"endColumn":46},{"ruleId":"197","severity":1,"message":"209","line":1076,"column":29,"nodeType":"171","messageId":"199","endLine":1076,"endColumn":38},{"ruleId":"197","severity":1,"message":"210","line":1077,"column":29,"nodeType":"171","messageId":"199","endLine":1077,"endColumn":42},{"ruleId":"197","severity":1,"message":"200","line":1078,"column":29,"nodeType":"171","messageId":"199","endLine":1078,"endColumn":40},{"ruleId":"197","severity":1,"message":"208","line":1082,"column":29,"nodeType":"171","messageId":"199","endLine":1082,"endColumn":43},{"ruleId":"197","severity":1,"message":"203","line":1083,"column":29,"nodeType":"171","messageId":"199","endLine":1083,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":1084,"column":29,"nodeType":"171","messageId":"199","endLine":1084,"endColumn":35},{"ruleId":"197","severity":1,"message":"201","line":1086,"column":29,"nodeType":"171","messageId":"199","endLine":1086,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":1087,"column":29,"nodeType":"171","messageId":"199","endLine":1087,"endColumn":31},{"ruleId":"197","severity":1,"message":"205","line":1088,"column":29,"nodeType":"171","messageId":"199","endLine":1088,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":1089,"column":29,"nodeType":"171","messageId":"199","endLine":1089,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":1095,"column":29,"nodeType":"171","messageId":"199","endLine":1095,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":1100,"column":29,"nodeType":"171","messageId":"199","endLine":1100,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":1101,"column":29,"nodeType":"171","messageId":"199","endLine":1101,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":1103,"column":29,"nodeType":"171","messageId":"199","endLine":1103,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":1104,"column":29,"nodeType":"171","messageId":"199","endLine":1104,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":1105,"column":29,"nodeType":"171","messageId":"199","endLine":1105,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":1106,"column":29,"nodeType":"171","messageId":"199","endLine":1106,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":1107,"column":29,"nodeType":"171","messageId":"199","endLine":1107,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":1108,"column":29,"nodeType":"171","messageId":"199","endLine":1108,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":1115,"column":29,"nodeType":"171","messageId":"199","endLine":1115,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":1121,"column":29,"nodeType":"171","messageId":"199","endLine":1121,"endColumn":46},{"ruleId":"197","severity":1,"message":"209","line":1123,"column":29,"nodeType":"171","messageId":"199","endLine":1123,"endColumn":38},{"ruleId":"197","severity":1,"message":"210","line":1124,"column":29,"nodeType":"171","messageId":"199","endLine":1124,"endColumn":42},{"ruleId":"197","severity":1,"message":"200","line":1125,"column":29,"nodeType":"171","messageId":"199","endLine":1125,"endColumn":40},{"ruleId":"197","severity":1,"message":"211","line":1129,"column":29,"nodeType":"171","messageId":"199","endLine":1129,"endColumn":42},{"ruleId":"197","severity":1,"message":"201","line":1130,"column":29,"nodeType":"171","messageId":"199","endLine":1130,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":1131,"column":29,"nodeType":"171","messageId":"199","endLine":1131,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":1133,"column":29,"nodeType":"171","messageId":"199","endLine":1133,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":1134,"column":29,"nodeType":"171","messageId":"199","endLine":1134,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":1135,"column":29,"nodeType":"171","messageId":"199","endLine":1135,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":1136,"column":29,"nodeType":"171","messageId":"199","endLine":1136,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":1142,"column":29,"nodeType":"171","messageId":"199","endLine":1142,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":1148,"column":29,"nodeType":"171","messageId":"199","endLine":1148,"endColumn":46},{"ruleId":"197","severity":1,"message":"200","line":1149,"column":29,"nodeType":"171","messageId":"199","endLine":1149,"endColumn":40},{"ruleId":"197","severity":1,"message":"201","line":1151,"column":29,"nodeType":"171","messageId":"199","endLine":1151,"endColumn":31},{"ruleId":"197","severity":1,"message":"202","line":1152,"column":29,"nodeType":"171","messageId":"199","endLine":1152,"endColumn":31},{"ruleId":"197","severity":1,"message":"203","line":1153,"column":29,"nodeType":"171","messageId":"199","endLine":1153,"endColumn":35},{"ruleId":"197","severity":1,"message":"204","line":1154,"column":29,"nodeType":"171","messageId":"199","endLine":1154,"endColumn":35},{"ruleId":"197","severity":1,"message":"205","line":1155,"column":29,"nodeType":"171","messageId":"199","endLine":1155,"endColumn":30},{"ruleId":"197","severity":1,"message":"206","line":1156,"column":29,"nodeType":"171","messageId":"199","endLine":1156,"endColumn":30},{"ruleId":"197","severity":1,"message":"207","line":1163,"column":29,"nodeType":"171","messageId":"199","endLine":1163,"endColumn":44},{"ruleId":"213","severity":1,"message":"214","line":1324,"column":33,"nodeType":"215","messageId":"216","endLine":1324,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":1326,"column":57,"nodeType":"190","messageId":"195","endLine":1326,"endColumn":59},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workflowId'. Either include it or remove the dependency array. If 'setEditor' needs the current value of 'workflowId', you can also switch to useReducer instead of useState and read 'workflowId' in the reducer.","ArrayExpression",["219"],["217"],["218"],"no-use-before-define","'x' was used before it was defined.","usedBeforeDefined","'y' was used before it was defined.","'curvature' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'_' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'line_path' is assigned a value but never used.","no-redeclare","'elemtsearchId_out' is already defined.","redeclared","'elemtsearch' is already defined.","'eX' is already defined.","'eY' is already defined.","'line_x' is already defined.","'line_y' is already defined.","'x' is already defined.","'y' is already defined.","'lineCurveSearch' is already defined.","'elemtsearchOut' is already defined.","'id_search' is already defined.","'elemtsearchId' is already defined.","'elemtsearchIn' is already defined.","'elemtsearchId_in' is already defined.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},"Update the dependencies array to be: [editor, workflowId]",{"range":"222","text":"223"},[2000,2008],"[editor, workflowId]"]